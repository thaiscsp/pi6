<!--
/*******************************************************************************
 * CANAL INTERNET E COISAS                                                     *
 * ESP32-CAM                                                                   *
 * Controle de Acesso com Reconhecimento Facial e integração ao Jarvis         *
 * Baseado no Projeto de Andrew McCabe, uso autorizado                         *
 * https://robotzero.one/access-control-with-face-recognition/                 *
 * 04/2020 - Andre Michelon                                                    *
 * andremichelon@internetecoisas.com.br                                        *
 * https://internetecoisas.com.br                                              *
 ******************************************************************************/
-->
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1.0, shrink-to-fit=no">
  <title>UNIVESP - Controle de Acesso</title>
  
  <style>
    body {
      color: #ffffff;
      font-family: "Trebuchet MS" !important;
      font-size: 12px;
      margin: 0px;
      width: 100%;
    }

    h1 {
      color: #ffffff;
      display: inline;
      font-size: 35px;
      padding: 4px;
      text-align: center;
      text-shadow: 2px 2px 2px black;
      vertical-align: middle;
    }

    h2 {
      color: black;
      font-size: 14px;
    }

    table {
      border-spacing: 0px;
      width: 100%;
    }

    th {
      background: #ffffff;
      font-size: 11px;
      padding: 0px;
    }

    td {
      background: #e3e3e3;
      font-size: 11px;
      text-align: center;
    }

    .logo {
      margin-right: 100px;
      max-height: 70px;
      text-align: left;
      vertical-align: middle;
    }

    input {
      border-width: 1px;
      font-family: "Trebuchet MS";
      padding: 10px;
      width: 80%;
    }

    input:focus {
      box-shadow: 1px 1px 4px rgb(9, 56, 97);
    }

    button {
      font-weight: bold;
      color: white;
      background: #af1817;
      margin: 10px;
      padding: 15px;
      width: 150px;
      border: none;
      font-family: "Trebuchet MS";
    }

    button:hover {
      background: #991313;
    }

    button:focus {
      box-shadow: 0px 0px 5px #e0e0e0;
    }

    button:active {
      background: #991313;
    }

    button:disabled {
       cursor: default;
       background: #a0a0a0;
    }

    #status-display {
      background: #606060;
      color: #ffffff;
      font-size: 16px;
      padding-top: 30px;
      padding-bottom: 30px;
      text-align: center;
    }

    #stream {
      margin: 58px 10px 58px 10px;
      box-shadow: 0px 0px 10px 2px rgba(0, 0, 0, 0.7);
    }

    .delete {
      background: #991313;
      border-radius: 100px;
      color: #ffffff;
      text-align: center;
      line-height: 18px;
      cursor: pointer;
    }

    header {
      background-color: #808080;
      padding: 20px;
    }

    footer {
      background: #303030;
      color: #ffffff;
      font-size: 12px;
      font-weight: bold;
      padding: 30px;
      text-align: center;
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", function(event) {
      var baseHost = document.location.origin;
      var streamUrl = baseHost + ":81";
      const WS_URL = "ws://" + window.location.host + ":82";
      const ws = new WebSocket(WS_URL);

      const view = document.getElementById("stream");
      const personFormField = document.getElementById("person");
      const streamButton = document.getElementById("button-stream");
      const detectButton = document.getElementById("button-detect");
      const captureButton = document.getElementById("button-capture");
      const recogniseButton = document.getElementById("button-recognise");
      const deleteAllButton = document.getElementById("delete_all");

      ws.onopen = () => {
        console.log(`Connected to ${WS_URL}`);
      };
      ws.onmessage = message => {
        if (typeof message.data === "string") {
          if (message.data.substr(0, 8) == "listface") {
            addFaceToScreen(message.data.substr(9));
          } else if (message.data == "delete_faces") {
            deleteAllFacesFromScreen();
          } else {
              document.getElementById("current-status").innerHTML = message.data;
              document.getElementById("status-display").style.background = "rgb(170, 236, 83)";
          }
        }
        if (message.data instanceof Blob) {
          var urlObject = URL.createObjectURL(message.data);
          view.src = urlObject;
        }
      }

      streamButton.onclick = () => {
        ws.send("stream");
      };
      detectButton.onclick = () => {
        ws.send("detect");
      };
      captureButton.onclick = () => {
        person_name = document.getElementById("person").value;
        ws.send("capture:" + person_name);
      };
      recogniseButton.onclick = () => {
        ws.send("recognise");
      };
      deleteAllButton.onclick = () => {
        ws.send("delete_all");
      };
      personFormField.onkeyup = () => {
        captureButton.disabled = false;
      };

      function deleteAllFacesFromScreen() {
        const faceList = document.querySelector("ul");
        while (faceList.firstChild) {
          faceList.firstChild.remove();
        }
        personFormField.value = "";
        captureButton.disabled = true;
      }

      function addFaceToScreen(person_name) {
        const faceList = document.querySelector("ul");
        let listItem = document.createElement("li");
        let closeItem = document.createElement("span");
        closeItem.classList.add("delete");
        closeItem.id = person_name;
        closeItem.addEventListener("click", function() {
          ws.send("remove:" + person_name);
        });
        listItem.appendChild(
          document.createElement("strong")
        ).textContent = person_name + " ";
        listItem.appendChild(closeItem).textContent = "X";
        faceList.appendChild(listItem);
      }

      captureButton.disabled = true;
    });
  </script>
</head>
<body>
  <header>
    <img class="logo" src="logo-univesp.png" title="UNIVESP">
    <h1>Controle de Acesso - Reconhecimento Facial</h1>
  </header>

  <table>
    <tr>
      <th rowspan="2">
        <img id="stream" src="" width="320" height="240">
        <div id="status-display"> <span id="current-status">Status</span> </div>
      </th>

      <td>
        <input id="person" type="text" value="" placeholder="Informe o nome do usuário"><br><br>
        <button id="button-stream">Ao Vivo</button>
        <button id="button-detect">Detectar Faces</button><br>
        <button id="button-capture" class="left" title="Informe um nome no campo acima antes de capturar a face">Adicionar Usuário</button>
        <button id="button-recognise" class="right">Reconhecer</button>
      </td>
    </tr>

    <tr>
      <td>
        <h2>Usuários Cadastrados</h2>
        <ul></ul>
        <button id="delete_all">Apagar Todos</button>
      </td>
    </tr>
  </table>

  <footer>
    <h4>2024. UNIVESP - Universidade Virtual do Estado de São Paulo.</h4>
  </footer>
</body>
</html>
